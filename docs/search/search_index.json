{
    "docs": [
        {
            "location": "/",
            "text": "jenkins-workflows\n\n\nPurpose\n\n\nTo be used in conjunction with the \njenkins-yml-workflow\n repository in a Jenkins repository. These are steps to take for interacting with a specific tool.\n\n\nCreating Workflows\n\n\nBasic structure of how the file should be laid out can be found in the \nexample.groovy\n file. There are some important things to remember here:\n\n\n\n\nThe \nreturn this;\n is required for Groovy to load anything.\n\n\nMethods must be using \npublic\n, \ndef\n is not sufficient due to the way the Groovy load method works.\n\n\nThe \nworkflowLibs\n when added as a global library is running outside of the Jenkins sandbox. Workflows will be inside the sandbox though so non white-listed methods cannot be used without approval.\n\n\nPrivate methods are perfectly acceptable as long as they are to be called within a public method.\n\n\n\n\nWhere to add new workflows\n\n\nIf the tool can be used for multiple languages (Make/Mage) it should be grouped with similar tools if possible, for instance \nGlide\n and \nGodep\n are tools for Golang dependency management so they would go in a \ngolang.groovy\n file. Make and Mage (a makefile alternative that allows you to use Go instead of Bash) would go into a \nbuild.groovy\n. If you are unsure of where to put a new workflow feel free to open an issue and we can help determine the best place for it.\n\n\nLocking to a release\n\n\nWe highly suggest locking to a release so you always get consistent build results. We will never modify tags or commit SHAs after a release happens. This also helps allow the workflows to evolve rapidly without breaking you. Patch versions will never have breaking changes but major/minor could though we will make efforts to mitigate this as much as possible.\n\n\nExample of how to lock to a release:\n\n\npipelines:\n  tools:\n    jenkins:\n      workflows:\n        tag: 0.1.0 # Example, check the latest release from https://github.com/concur/jenkins-workflows/releases\n\n\n\n\nContributing\n\n\nWe welcome your contributions and request that you please make sure that you look at the \ncontributing guidelines\n before contributing. If you have a question on a feature proposal, or a bug fix that you'd like to address, please create an issue so that contributors can discuss and collaborate.",
            "title": "Home"
        },
        {
            "location": "/#jenkins-workflows",
            "text": "",
            "title": "jenkins-workflows"
        },
        {
            "location": "/#purpose",
            "text": "To be used in conjunction with the  jenkins-yml-workflow  repository in a Jenkins repository. These are steps to take for interacting with a specific tool.",
            "title": "Purpose"
        },
        {
            "location": "/#creating-workflows",
            "text": "Basic structure of how the file should be laid out can be found in the  example.groovy  file. There are some important things to remember here:   The  return this;  is required for Groovy to load anything.  Methods must be using  public ,  def  is not sufficient due to the way the Groovy load method works.  The  workflowLibs  when added as a global library is running outside of the Jenkins sandbox. Workflows will be inside the sandbox though so non white-listed methods cannot be used without approval.  Private methods are perfectly acceptable as long as they are to be called within a public method.",
            "title": "Creating Workflows"
        },
        {
            "location": "/#where-to-add-new-workflows",
            "text": "If the tool can be used for multiple languages (Make/Mage) it should be grouped with similar tools if possible, for instance  Glide  and  Godep  are tools for Golang dependency management so they would go in a  golang.groovy  file. Make and Mage (a makefile alternative that allows you to use Go instead of Bash) would go into a  build.groovy . If you are unsure of where to put a new workflow feel free to open an issue and we can help determine the best place for it.",
            "title": "Where to add new workflows"
        },
        {
            "location": "/#locking-to-a-release",
            "text": "We highly suggest locking to a release so you always get consistent build results. We will never modify tags or commit SHAs after a release happens. This also helps allow the workflows to evolve rapidly without breaking you. Patch versions will never have breaking changes but major/minor could though we will make efforts to mitigate this as much as possible.  Example of how to lock to a release:  pipelines:\n  tools:\n    jenkins:\n      workflows:\n        tag: 0.1.0 # Example, check the latest release from https://github.com/concur/jenkins-workflows/releases",
            "title": "Locking to a release"
        },
        {
            "location": "/#contributing",
            "text": "We welcome your contributions and request that you please make sure that you look at the  contributing guidelines  before contributing. If you have a question on a feature proposal, or a bug fix that you'd like to address, please create an issue so that contributors can discuss and collaborate.",
            "title": "Contributing"
        },
        {
            "location": "/ANSIBLE/",
            "text": "Ansible\n\n\nOverview\n\n\n\n\nExecute Ansible playbooks within a pipeline.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image that has Ansible installed.\n\n\n\n\n\n\nplaybook\n\n\nRequired\n\n\nString\n\n\n\n\nPath to the playbook file used during this run.\n\n\n\n\n\n\ninventory\n\n\nRequired\n\n\nString\n\n\n\n\nPath to an inventory file to run the playbook against.\n\n\n\n\n\n\nlimit\n\n\nOptional\n\n\nString\n\n\n\n\nEquivalent to \n-l\n or \n--limit\n only run against specific host groups.\n\n\n\n\n\n\nsudoUser\n\n\nOptional\n\n\nString\n\n\nroot\n\n\nEquivalent to \n--become-user\n.\n\n\n\n\n\n\ncredentials\n\n\nOptional\n\n\nMap\n\n\n\n\nKey/Value pair of the credentials to use when running the playbook.\n\n\n\n\n\n\nextraVars\n\n\nOptional\n\n\nMap\n\n\n\n\nequivalent to \n-e\n or \n--extra-vars\n overwrite variables.\n\n\n\n\n\n\ntags\n\n\nOptional\n\n\nList\n\n\n\n\nRun only specific tags during the playbook run.\n\n\n\n\n\n\nskippedTags\n\n\nOptional\n\n\nList\n\n\n\n\nSkip the specified tags during the playbook run.\n\n\n\n\n\n\nextras\n\n\nOptional\n\n\nList\n\n\n\n\nAdditional arguments to the \nansible-playbook\n command.\n\n\n\n\n\n\nsudo\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nEquivalent to \n-b\n or \n--become\n.\n\n\n\n\n\n\nforks\n\n\nOptional\n\n\nint\n\n\n10\n\n\nEquivalent to \n-f\n or \n--forks\n specify number of parallel processes to use.\n\n\n\n\n\n\nverbosity\n\n\nOptional\n\n\nint\n\n\n\n\nLevels of verbose output to have. Example setting this to 2 would be the equivalent of -vv.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nplaybook\n\n\n\n\nExecute an Ansible playbook.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image that has Ansible installed.\n\n\n\n\n\n\nplaybook\n\n\nRequired\n\n\nString\n\n\n\n\nPath to the playbook file used during this run.\n\n\n\n\n\n\ninventory\n\n\nRequired\n\n\nString\n\n\n\n\nPath to an inventory file to run the playbook against.\n\n\n\n\n\n\nlimit\n\n\nOptional\n\n\nString\n\n\n\n\nEquivalent to \n-l\n or \n--limit\n only run against specific host groups.\n\n\n\n\n\n\nsudoUser\n\n\nOptional\n\n\nString\n\n\nroot\n\n\nEquivalent to \n--become-user\n.\n\n\n\n\n\n\ncredentials\n\n\nOptional\n\n\nMap\n\n\n\n\nKey/Value pair of the credentials to use when running the playbook.\n\n\n\n\n\n\nextraVars\n\n\nOptional\n\n\nMap\n\n\n\n\nequivalent to \n-e\n or \n--extra-vars\n overwrite variables.\n\n\n\n\n\n\ntags\n\n\nOptional\n\n\nList\n\n\n\n\nRun only specific tags during the playbook run.\n\n\n\n\n\n\nskippedTags\n\n\nOptional\n\n\nList\n\n\n\n\nSkip the specified tags during the playbook run.\n\n\n\n\n\n\nextras\n\n\nOptional\n\n\nList\n\n\n\n\nAdditional arguments to the \nansible-playbook\n command.\n\n\n\n\n\n\nsudo\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nEquivalent to \n-b\n or \n--become\n.\n\n\n\n\n\n\nforks\n\n\nOptional\n\n\nint\n\n\n10\n\n\nEquivalent to \n-f\n or \n--forks\n specify number of parallel processes to use.\n\n\n\n\n\n\nverbosity\n\n\nOptional\n\n\nint\n\n\n\n\nLevels of verbose output to have. Example setting this to 2 would be the equivalent of -vv.\n\n\n\n\n\n\n\n\nplaybook Example\n\n\nbranches:\n  feature:\n    steps:\n      - ansible:\n          # Simple\n          - playbook:\n          # Advanced\n          - playbook:\n              playbook: scripts/ansible/example-playbook.yml\n              extraVars:\n                DOCKER_IMAGE: \"{{ DOCKER_IMAGE_TAG }}\"\n              limit: qa\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    ansible:\n      credentials:\n        description: \"SSH deploy credentials\"\n      buildImage: \"{{ quay_uri }}/da-workflow/ansible-alpine:2.4.1.0\"\n      playbook: \"ansible/playbooks/app_deploy.yml\"\n      inventory: \"ansible/app_inventory.yml\"\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - ansible:\n          - playbook:\n              limit: staging\n    master:\n      steps:\n        - github:\n          - createRelease:\n        - ansible:\n          - playbook:\n              limit: production\n\n\n\n\nAdditional Resources\n\n\n\n\nAnsible\n\n\nDocker Images",
            "title": "Ansible"
        },
        {
            "location": "/ANSIBLE/#ansible",
            "text": "",
            "title": "Ansible"
        },
        {
            "location": "/ANSIBLE/#overview",
            "text": "Execute Ansible playbooks within a pipeline.",
            "title": "Overview"
        },
        {
            "location": "/ANSIBLE/#tools-section",
            "text": "Name  Required  Type  Default  Description      buildImage  Required  String   Docker image that has Ansible installed.    playbook  Required  String   Path to the playbook file used during this run.    inventory  Required  String   Path to an inventory file to run the playbook against.    limit  Optional  String   Equivalent to  -l  or  --limit  only run against specific host groups.    sudoUser  Optional  String  root  Equivalent to  --become-user .    credentials  Optional  Map   Key/Value pair of the credentials to use when running the playbook.    extraVars  Optional  Map   equivalent to  -e  or  --extra-vars  overwrite variables.    tags  Optional  List   Run only specific tags during the playbook run.    skippedTags  Optional  List   Skip the specified tags during the playbook run.    extras  Optional  List   Additional arguments to the  ansible-playbook  command.    sudo  Optional  Boolean  False  Equivalent to  -b  or  --become .    forks  Optional  int  10  Equivalent to  -f  or  --forks  specify number of parallel processes to use.    verbosity  Optional  int   Levels of verbose output to have. Example setting this to 2 would be the equivalent of -vv.",
            "title": "Tools Section"
        },
        {
            "location": "/ANSIBLE/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/ANSIBLE/#playbook",
            "text": "Execute an Ansible playbook.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image that has Ansible installed.    playbook  Required  String   Path to the playbook file used during this run.    inventory  Required  String   Path to an inventory file to run the playbook against.    limit  Optional  String   Equivalent to  -l  or  --limit  only run against specific host groups.    sudoUser  Optional  String  root  Equivalent to  --become-user .    credentials  Optional  Map   Key/Value pair of the credentials to use when running the playbook.    extraVars  Optional  Map   equivalent to  -e  or  --extra-vars  overwrite variables.    tags  Optional  List   Run only specific tags during the playbook run.    skippedTags  Optional  List   Skip the specified tags during the playbook run.    extras  Optional  List   Additional arguments to the  ansible-playbook  command.    sudo  Optional  Boolean  False  Equivalent to  -b  or  --become .    forks  Optional  int  10  Equivalent to  -f  or  --forks  specify number of parallel processes to use.    verbosity  Optional  int   Levels of verbose output to have. Example setting this to 2 would be the equivalent of -vv.",
            "title": "playbook"
        },
        {
            "location": "/ANSIBLE/#playbook-example",
            "text": "branches:\n  feature:\n    steps:\n      - ansible:\n          # Simple\n          - playbook:\n          # Advanced\n          - playbook:\n              playbook: scripts/ansible/example-playbook.yml\n              extraVars:\n                DOCKER_IMAGE: \"{{ DOCKER_IMAGE_TAG }}\"\n              limit: qa",
            "title": "playbook Example"
        },
        {
            "location": "/ANSIBLE/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    ansible:\n      credentials:\n        description: \"SSH deploy credentials\"\n      buildImage: \"{{ quay_uri }}/da-workflow/ansible-alpine:2.4.1.0\"\n      playbook: \"ansible/playbooks/app_deploy.yml\"\n      inventory: \"ansible/app_inventory.yml\"\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - ansible:\n          - playbook:\n              limit: staging\n    master:\n      steps:\n        - github:\n          - createRelease:\n        - ansible:\n          - playbook:\n              limit: production",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/ANSIBLE/#additional-resources",
            "text": "Ansible  Docker Images",
            "title": "Additional Resources"
        },
        {
            "location": "/BUILD/",
            "text": "Build\n\n\nOverview\n\n\n\n\nIncludes workflows for running various language independent build tools.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nmage\n\n\nDocker image that has Mage installed.\n\n\n\n\n\n\ntarget\n\n\nString\n\n\n\n\nmage\n\n\nThe mage target to execute.\n\n\n\n\n\n\nmageFileDir\n\n\nString\n\n\n.\n\n\nmage\n\n\nThe directory containing your magefile.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nmage\n\n\n\n\nExecute mage targets.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image that has Mage installed.\n\n\n\n\n\n\ntarget\n\n\nString\n\n\n\n\nThe mage target to execute.\n\n\n\n\n\n\nmageFileDir\n\n\nString\n\n\n.\n\n\nThe directory containing your magefile.\n\n\n\n\n\n\n\n\nmage Example\n\n\nbranches:\n  feature:\n    steps:\n      - build:\n          # Simple\n          - mage:\n          # Advanced\n          - mage:\n              target: Install\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    mage:\n      buildImage: \"quay.io/example/mage\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - build:\n          - mage:\n        - build:\n          - mage:\n              target: Docker\n\n\n\n\nAdditional Resources\n\n\n\n\nMagefile GitHub\n\n\nMagefile Official Docs",
            "title": "Build"
        },
        {
            "location": "/BUILD/#build",
            "text": "",
            "title": "Build"
        },
        {
            "location": "/BUILD/#overview",
            "text": "Includes workflows for running various language independent build tools.",
            "title": "Overview"
        },
        {
            "location": "/BUILD/#tools-section",
            "text": "Name  Type  Default  Section  Description      buildImage  String   mage  Docker image that has Mage installed.    target  String   mage  The mage target to execute.    mageFileDir  String  .  mage  The directory containing your magefile.",
            "title": "Tools Section"
        },
        {
            "location": "/BUILD/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/BUILD/#mage",
            "text": "Execute mage targets.      Name  Type  Default  Description      buildImage  String   Docker image that has Mage installed.    target  String   The mage target to execute.    mageFileDir  String  .  The directory containing your magefile.",
            "title": "mage"
        },
        {
            "location": "/BUILD/#mage-example",
            "text": "branches:\n  feature:\n    steps:\n      - build:\n          # Simple\n          - mage:\n          # Advanced\n          - mage:\n              target: Install",
            "title": "mage Example"
        },
        {
            "location": "/BUILD/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    mage:\n      buildImage: \"quay.io/example/mage\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - build:\n          - mage:\n        - build:\n          - mage:\n              target: Docker",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/BUILD/#additional-resources",
            "text": "Magefile GitHub  Magefile Official Docs",
            "title": "Additional Resources"
        },
        {
            "location": "/DOCKER/",
            "text": "Docker\n\n\nOverview\n\n\n\n\nBuild, tag and push Docker images to any registry.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerfile\n\n\nString\n\n\n\n\ndocker\n\n\nPath to a dockerfile to build, equivalent to \n-f <dockerfile>\n.\n\n\n\n\n\n\nimageName\n\n\nString\n\n\n<git_owner>/<git_repo>\n\n\ndocker\n\n\nWhat to name the image, equivalent to \n-t <imageName>\n.\n\n\n\n\n\n\nimageTag\n\n\nString\n\n\nbuildVersion\n\n\ndocker\n\n\nWhat to name the image, equivalent to \n-t <imageName>:<imageTag>\n.\n\n\n\n\n\n\ncontextPath\n\n\nString\n\n\n.\n\n\ndocker\n\n\nPath to the directory to start the Docker build, equivalent to the final argument to docker build command.\n\n\n\n\n\n\nuri\n\n\nString\n\n\nhttps://<git_host>/<git_owner>/<git_repo>\n\n\ngithub\n\n\n\n\n\n\n\n\nbuildArgs\n\n\nMap\n\n\n\n\ndocker\n\n\nA map of arguments to pass to docker build command, equivalent to \n--build-arg <key>=<value>\n.\n\n\n\n\n\n\nuri\n\n\nString\n\n\n\n\ndocker\n\n\nThe uri of the registry to push to, such as quay.io, if not provided it will generally push to Docker hub.\n\n\n\n\n\n\nadditionalTags\n\n\nList\n\n\n\n\ndocker\n\n\nA list of tags to push in addition to \nimageTag\n above.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\ndocker\n\n\nA map of criteria to use to search for your credential.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nbuild\n\n\n\n\nBuild a Docker image.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerfile\n\n\nString\n\n\n\n\nPath to a dockerfile to build, equivalent to \n-f <dockerfile>\n.\n\n\n\n\n\n\nimageName\n\n\nString\n\n\n<git_owner>/<git_repo>\n\n\nWhat to name the image, equivalent to \n-t <imageName>\n.\n\n\n\n\n\n\nimageTag\n\n\nString\n\n\nbuildVersion\n\n\nWhat to name the image, equivalent to \n-t <imageName>:<imageTag>\n.\n\n\n\n\n\n\ncontextPath\n\n\nString\n\n\n.\n\n\nPath to the directory to start the Docker build, equivalent to the final argument to docker build command.\n\n\n\n\n\n\nvcsUrl\n\n\nString\n\n\nhttps://<git_host>/<git_owner>/<git_repo>\n\n\n\n\n\n\n\n\nbuildArgs\n\n\nMap\n\n\n\n\nA map of arguments to pass to docker build command, equivalent to \n--build-arg <key>=<value>\n.\n\n\n\n\n\n\n\n\nbuild Example\n\n\nbranches:\n  feature:\n    steps:\n      - docker:\n          # Simple\n          - build:\n          # Advanced\n          - build:\n              dockerfile: production.dockerfile\n              buildArgs:\n                CommitSha: \"{{ git_commit }}\"\n                BuildDate: \"{{ timestamp }}\"\n                BuildVersion: \"{{ build_version }}\"\n\n\n\n\npush\n\n\n\n\nPush a Docker image to a remote registry.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimageName\n\n\nString\n\n\n<git_owner>/<git_repo>\n\n\nThe name of the image to push.\n\n\n\n\n\n\nimageTag\n\n\nString\n\n\nbuildVersion\n\n\nTag of the image to push.\n\n\n\n\n\n\nuri\n\n\nString\n\n\n\n\nThe uri of the registry to push to, such as quay.io or hub.docker.com.\n\n\n\n\n\n\nadditionalTags\n\n\nList\n\n\n\n\nA list of tags to push in addition to \nimageTag\n above.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\nA map of criteria to use to search for your credential.\n\n\n\n\n\n\n\n\npush Example\n\n\nbranches:\n  feature:\n    steps:\n      - docker:\n          # Simple\n          - push:\n          # Advanced\n          - push:\n              credentials:\n                description: example docker creds.\n              additionalTags:\n                - \"{{ git_commit }}\"\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    docker:\n      credentials:\n        description: example docker creds.\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - docker: # This should be your build process\n          - build:\n              dockerfile: production.dockerfile\n              buildArgs:\n                CommitSha: \"{{ git_commit }}\"\n                BuildDate: \"{{ timestamp }}\"\n                BuildVersion: \"{{ build_version }}\"\n          - push:\n              additionalTags:\n                - \"{{ git_commit }}\"\n\n\n\n\nAdditional Resources\n\n\n\n\nPromotion - Artifactory\n\n\nDocker build documentation\n\n\nDocker push documentation",
            "title": "Docker"
        },
        {
            "location": "/DOCKER/#docker",
            "text": "",
            "title": "Docker"
        },
        {
            "location": "/DOCKER/#overview",
            "text": "Build, tag and push Docker images to any registry.",
            "title": "Overview"
        },
        {
            "location": "/DOCKER/#tools-section",
            "text": "Name  Type  Default  Section  Description      dockerfile  String   docker  Path to a dockerfile to build, equivalent to  -f <dockerfile> .    imageName  String  <git_owner>/<git_repo>  docker  What to name the image, equivalent to  -t <imageName> .    imageTag  String  buildVersion  docker  What to name the image, equivalent to  -t <imageName>:<imageTag> .    contextPath  String  .  docker  Path to the directory to start the Docker build, equivalent to the final argument to docker build command.    uri  String  https://<git_host>/<git_owner>/<git_repo>  github     buildArgs  Map   docker  A map of arguments to pass to docker build command, equivalent to  --build-arg <key>=<value> .    uri  String   docker  The uri of the registry to push to, such as quay.io, if not provided it will generally push to Docker hub.    additionalTags  List   docker  A list of tags to push in addition to  imageTag  above.    credentials  Map   docker  A map of criteria to use to search for your credential.",
            "title": "Tools Section"
        },
        {
            "location": "/DOCKER/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/DOCKER/#build",
            "text": "Build a Docker image.      Name  Type  Default  Description      dockerfile  String   Path to a dockerfile to build, equivalent to  -f <dockerfile> .    imageName  String  <git_owner>/<git_repo>  What to name the image, equivalent to  -t <imageName> .    imageTag  String  buildVersion  What to name the image, equivalent to  -t <imageName>:<imageTag> .    contextPath  String  .  Path to the directory to start the Docker build, equivalent to the final argument to docker build command.    vcsUrl  String  https://<git_host>/<git_owner>/<git_repo>     buildArgs  Map   A map of arguments to pass to docker build command, equivalent to  --build-arg <key>=<value> .",
            "title": "build"
        },
        {
            "location": "/DOCKER/#build-example",
            "text": "branches:\n  feature:\n    steps:\n      - docker:\n          # Simple\n          - build:\n          # Advanced\n          - build:\n              dockerfile: production.dockerfile\n              buildArgs:\n                CommitSha: \"{{ git_commit }}\"\n                BuildDate: \"{{ timestamp }}\"\n                BuildVersion: \"{{ build_version }}\"",
            "title": "build Example"
        },
        {
            "location": "/DOCKER/#push",
            "text": "Push a Docker image to a remote registry.      Name  Type  Default  Description      imageName  String  <git_owner>/<git_repo>  The name of the image to push.    imageTag  String  buildVersion  Tag of the image to push.    uri  String   The uri of the registry to push to, such as quay.io or hub.docker.com.    additionalTags  List   A list of tags to push in addition to  imageTag  above.    credentials  Map   A map of criteria to use to search for your credential.",
            "title": "push"
        },
        {
            "location": "/DOCKER/#push-example",
            "text": "branches:\n  feature:\n    steps:\n      - docker:\n          # Simple\n          - push:\n          # Advanced\n          - push:\n              credentials:\n                description: example docker creds.\n              additionalTags:\n                - \"{{ git_commit }}\"",
            "title": "push Example"
        },
        {
            "location": "/DOCKER/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    docker:\n      credentials:\n        description: example docker creds.\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - docker: # This should be your build process\n          - build:\n              dockerfile: production.dockerfile\n              buildArgs:\n                CommitSha: \"{{ git_commit }}\"\n                BuildDate: \"{{ timestamp }}\"\n                BuildVersion: \"{{ build_version }}\"\n          - push:\n              additionalTags:\n                - \"{{ git_commit }}\"",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/DOCKER/#additional-resources",
            "text": "Promotion - Artifactory  Docker build documentation  Docker push documentation",
            "title": "Additional Resources"
        },
        {
            "location": "/DOCUMENTATION/",
            "text": "Documentation\n\n\nOverview\n\n\n\n\nIncludes workflows for running various language independent documentation generator tools.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nmage\n\n\nDocker image that has Mage installed.\n\n\n\n\n\n\ntarget\n\n\nString\n\n\n\n\nmage\n\n\nThe mage target to execute.\n\n\n\n\n\n\nmageFileDir\n\n\nString\n\n\n.\n\n\nmage\n\n\nThe directory containing your magefile.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nmkdocs\n\n\n\n\nGenerate documentation using mkdocs\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image that has mkdocs installed.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\nbuild\n\n\nWhich mkdocs command to use, serve will not work, supported commands are build and gh-deploy.\n\n\n\n\n\n\nextraArgs\n\n\nList\n\n\n\n\nA list of extra arguments to append to the command.\n\n\n\n\n\n\n\n\nmkdocs Example\n\n\nbranches:\n  feature:\n    steps:\n      - build:\n          # Simple\n          - mkdocs:\n          # Advanced\n          - mkdocs:\n              command: gh-deploy\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    mkdocs:\n      buildImage: \"quay.io/example/mkdocs\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - documentation:\n          - mkdocs:\n\n\n\n\nAdditional Resources\n\n\n\n\nMkdocs",
            "title": "Documentation"
        },
        {
            "location": "/DOCUMENTATION/#documentation",
            "text": "",
            "title": "Documentation"
        },
        {
            "location": "/DOCUMENTATION/#overview",
            "text": "Includes workflows for running various language independent documentation generator tools.",
            "title": "Overview"
        },
        {
            "location": "/DOCUMENTATION/#tools-section",
            "text": "Name  Type  Default  Section  Description      buildImage  String   mage  Docker image that has Mage installed.    target  String   mage  The mage target to execute.    mageFileDir  String  .  mage  The directory containing your magefile.",
            "title": "Tools Section"
        },
        {
            "location": "/DOCUMENTATION/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/DOCUMENTATION/#mkdocs",
            "text": "Generate documentation using mkdocs      Name  Type  Default  Description      buildImage  String   Docker image that has mkdocs installed.    command  String  build  Which mkdocs command to use, serve will not work, supported commands are build and gh-deploy.    extraArgs  List   A list of extra arguments to append to the command.",
            "title": "mkdocs"
        },
        {
            "location": "/DOCUMENTATION/#mkdocs-example",
            "text": "branches:\n  feature:\n    steps:\n      - build:\n          # Simple\n          - mkdocs:\n          # Advanced\n          - mkdocs:\n              command: gh-deploy",
            "title": "mkdocs Example"
        },
        {
            "location": "/DOCUMENTATION/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    mkdocs:\n      buildImage: \"quay.io/example/mkdocs\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - documentation:\n          - mkdocs:",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/DOCUMENTATION/#additional-resources",
            "text": "Mkdocs",
            "title": "Additional Resources"
        },
        {
            "location": "/EMAIL/",
            "text": "Email\n\n\nOverview\n\n\n\n\nSend an email within your pipeline.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nto\n\n\nRequired\n\n\nString\n\n\n\n\nThe address to send this email to.\n\n\n\n\n\n\nsubject\n\n\nRequired\n\n\nString\n\n\n\n\nThe subject of the email.\n\n\n\n\n\n\nbody\n\n\nRequired\n\n\nString\n\n\n\n\nThe body of the email to send.\n\n\n\n\n\n\nfrom\n\n\n\n\nString\n\n\n\n\nWho to show the email was sent from.\n\n\n\n\n\n\nbcc\n\n\n\n\nString\n\n\n\n\nBCC email address list.\n\n\n\n\n\n\ncc\n\n\n\n\nString\n\n\n\n\nCC email address list.\n\n\n\n\n\n\ncharset\n\n\n\n\nString\n\n\nUTF-8\n\n\nEmail body character encoding.\n\n\n\n\n\n\nmimeType\n\n\n\n\nString\n\n\ntext/plain.\n\n\nEmail body MIME type.\n\n\n\n\n\n\nreplyTo\n\n\n\n\nString\n\n\n\n\nReply-To email address.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nsend\n\n\n\n\nSend an email.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nto\n\n\nRequired\n\n\nString\n\n\n\n\nThe address to send this email to.\n\n\n\n\n\n\nsubject\n\n\nRequired\n\n\nString\n\n\n\n\nThe subject of the email.\n\n\n\n\n\n\nbody\n\n\nRequired\n\n\nString\n\n\n\n\nThe body of the email to send.\n\n\n\n\n\n\nfrom\n\n\n\n\nString\n\n\n\n\nWho to show the email was sent from.\n\n\n\n\n\n\nbcc\n\n\n\n\nString\n\n\n\n\nBCC email address list.\n\n\n\n\n\n\ncc\n\n\n\n\nString\n\n\n\n\nCC email address list.\n\n\n\n\n\n\ncharset\n\n\n\n\nString\n\n\nUTF-8\n\n\nEmail body character encoding.\n\n\n\n\n\n\nmimeType\n\n\n\n\nString\n\n\ntext/plain.\n\n\nEmail body MIME type.\n\n\n\n\n\n\nreplyTo\n\n\n\n\nString\n\n\n\n\nReply-To email address.\n\n\n\n\n\n\n\n\nsend Example\n\n\nbranches:\n  feature:\n    steps:\n      - email:\n          # Simple\n          - send: \"Example email from {{ build_url }}\"\n          # Advanced\n          - send:\n              to: user@example.com\n              body: \"Example email from {{ build_url }}\"\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    email:\n      cc: cc-example@domain.com\n      replyTo: repyto@domain.com\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - email:\n          - send:\n              to: team@domain.com\n              body: \"Deployment to staging successful for branch {{ branch_name }} | {{ build_url }}\"\n    master:\n      steps:\n        - email:\n          - send:\n              to: team@domain.com\n              body: \"Merge to master successful, deployment successful | {{ build_url }}\"\n\n\n\n\nAdditional Resources\n\n\n\n\nMail plugin site",
            "title": "Email"
        },
        {
            "location": "/EMAIL/#email",
            "text": "",
            "title": "Email"
        },
        {
            "location": "/EMAIL/#overview",
            "text": "Send an email within your pipeline.",
            "title": "Overview"
        },
        {
            "location": "/EMAIL/#tools-section",
            "text": "Name  Required  Type  Default  Description      to  Required  String   The address to send this email to.    subject  Required  String   The subject of the email.    body  Required  String   The body of the email to send.    from   String   Who to show the email was sent from.    bcc   String   BCC email address list.    cc   String   CC email address list.    charset   String  UTF-8  Email body character encoding.    mimeType   String  text/plain.  Email body MIME type.    replyTo   String   Reply-To email address.",
            "title": "Tools Section"
        },
        {
            "location": "/EMAIL/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/EMAIL/#send",
            "text": "Send an email.      Name  Required  Type  Default  Description      to  Required  String   The address to send this email to.    subject  Required  String   The subject of the email.    body  Required  String   The body of the email to send.    from   String   Who to show the email was sent from.    bcc   String   BCC email address list.    cc   String   CC email address list.    charset   String  UTF-8  Email body character encoding.    mimeType   String  text/plain.  Email body MIME type.    replyTo   String   Reply-To email address.",
            "title": "send"
        },
        {
            "location": "/EMAIL/#send-example",
            "text": "branches:\n  feature:\n    steps:\n      - email:\n          # Simple\n          - send: \"Example email from {{ build_url }}\"\n          # Advanced\n          - send:\n              to: user@example.com\n              body: \"Example email from {{ build_url }}\"",
            "title": "send Example"
        },
        {
            "location": "/EMAIL/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    email:\n      cc: cc-example@domain.com\n      replyTo: repyto@domain.com\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - email:\n          - send:\n              to: team@domain.com\n              body: \"Deployment to staging successful for branch {{ branch_name }} | {{ build_url }}\"\n    master:\n      steps:\n        - email:\n          - send:\n              to: team@domain.com\n              body: \"Merge to master successful, deployment successful | {{ build_url }}\"",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/EMAIL/#additional-resources",
            "text": "Mail plugin site",
            "title": "Additional Resources"
        },
        {
            "location": "/FPM/",
            "text": "FPM\n\n\nOverview\n\n\n\n\nUse the FPM tool to create packages for various systems.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image containing the FPM tools as well as any other requirements.\n\n\n\n\n\n\nsourceType\n\n\n\n\nString\n\n\ndir\n\n\nRefer to \nSources documentation\n.\n\n\n\n\n\n\nversion\n\n\n\n\nString\n\n\n{{ build_version }}\n\n\nVersion number to use for the resulting package, eqivalent to the \n-v\n flag.\n\n\n\n\n\n\nname\n\n\n\n\nString\n\n\n<repo>\n\n\nThe name of the output package, format will be \n-\n.\n.\n\n\n\n\n\n\nsourceDir\n\n\n\n\nString\n\n\n\n\nWhen using the dir sourceType this is the directory that will get packaged.\n\n\n\n\n\n\nextraArgs\n\n\n\n\nString\n\n\n\n\nAny extra arguments to the FPM command.\n\n\n\n\n\n\ndependencies\n\n\n\n\nList\n\n\n\n\nA list of dependencies that are required by your output package.\n\n\n\n\n\n\ntargetTypes\n\n\n\n\nList\n\n\n['rpm']\n\n\nFormats to create with the command.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\npackage\n\n\n\n\nCreate application packages for various systems with one tool.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image containing the FPM tools as well as any other requirements.\n\n\n\n\n\n\nsourceType\n\n\n\n\nString\n\n\ndir\n\n\nRefer to \nSources documentation\n.\n\n\n\n\n\n\nversion\n\n\n\n\nString\n\n\n{{ build_version }}\n\n\nVersion number to use for the resulting package, eqivalent to the \n-v\n flag.\n\n\n\n\n\n\nname\n\n\n\n\nString\n\n\n<repo>\n\n\nThe name of the output package, format will be \n-\n.\n.\n\n\n\n\n\n\nsourceDir\n\n\n\n\nString\n\n\n\n\nWhen using the dir sourceType this is the directory that will get packaged.\n\n\n\n\n\n\nextraArgs\n\n\n\n\nString\n\n\n\n\nAny extra arguments to the FPM command.\n\n\n\n\n\n\ndependencies\n\n\n\n\nList\n\n\n\n\nA list of dependencies that are required by your output package.\n\n\n\n\n\n\ntargetTypes\n\n\n\n\nList\n\n\n['rpm']\n\n\nFormats to create with the command.\n\n\n\n\n\n\n\n\npackage Example\n\n\nbranches:\n  feature:\n    steps:\n      - ansible:\n          # Simple\n          - playbook:\n          # Advanced\n          - playbook:\n              playbook: scripts/ansible/example-playbook.yml\n              extraVars:\n                DOCKER_IMAGE: \"{{ DOCKER_IMAGE_TAG }}\"\n              limit: qa\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - fpm:\n          - package:\n              targetTypes:\n                - deb\n                - rpm\n        - artifactory:\n          - publish:\n\n\n\n\nAdditional Resources\n\n\n\n\nFPM",
            "title": "Fpm"
        },
        {
            "location": "/FPM/#fpm",
            "text": "",
            "title": "FPM"
        },
        {
            "location": "/FPM/#overview",
            "text": "Use the FPM tool to create packages for various systems.",
            "title": "Overview"
        },
        {
            "location": "/FPM/#tools-section",
            "text": "Name  Required  Type  Default  Description      buildImage  Required  String   Docker image containing the FPM tools as well as any other requirements.    sourceType   String  dir  Refer to  Sources documentation .    version   String  {{ build_version }}  Version number to use for the resulting package, eqivalent to the  -v  flag.    name   String  <repo>  The name of the output package, format will be  - . .    sourceDir   String   When using the dir sourceType this is the directory that will get packaged.    extraArgs   String   Any extra arguments to the FPM command.    dependencies   List   A list of dependencies that are required by your output package.    targetTypes   List  ['rpm']  Formats to create with the command.",
            "title": "Tools Section"
        },
        {
            "location": "/FPM/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/FPM/#package",
            "text": "Create application packages for various systems with one tool.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image containing the FPM tools as well as any other requirements.    sourceType   String  dir  Refer to  Sources documentation .    version   String  {{ build_version }}  Version number to use for the resulting package, eqivalent to the  -v  flag.    name   String  <repo>  The name of the output package, format will be  - . .    sourceDir   String   When using the dir sourceType this is the directory that will get packaged.    extraArgs   String   Any extra arguments to the FPM command.    dependencies   List   A list of dependencies that are required by your output package.    targetTypes   List  ['rpm']  Formats to create with the command.",
            "title": "package"
        },
        {
            "location": "/FPM/#package-example",
            "text": "branches:\n  feature:\n    steps:\n      - ansible:\n          # Simple\n          - playbook:\n          # Advanced\n          - playbook:\n              playbook: scripts/ansible/example-playbook.yml\n              extraVars:\n                DOCKER_IMAGE: \"{{ DOCKER_IMAGE_TAG }}\"\n              limit: qa",
            "title": "package Example"
        },
        {
            "location": "/FPM/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - fpm:\n          - package:\n              targetTypes:\n                - deb\n                - rpm\n        - artifactory:\n          - publish:",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/FPM/#additional-resources",
            "text": "FPM",
            "title": "Additional Resources"
        },
        {
            "location": "/GIT/",
            "text": "Git\n\n\nOverview\n\n\n\n\nVarious git functions for use within your pipeline. \nNOTE\n: You are fully responsible for usage of this workflow, there is potential to cause bad commits.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nString\n\n\nAutomatic commit from {{ job_url }}\n\n\ngit.commit\n\n\nThe message to attach to the commit.\n\n\n\n\n\n\npattern\n\n\nString\n\n\n.\n\n\ngit.commit\n\n\nPattern for the \ngit add\n command.\n\n\n\n\n\n\nauthor\n\n\nString\n\n\n${env.GIT_AUTHOR} <${env.GIT_EMAIL}>\n\n\ngit.commit\n\n\nAuthor of this commit.\n\n\n\n\n\n\namend\n\n\nBoolean\n\n\nFalse\n\n\ngit.commit\n\n\nWhether to amend the previous commit.\n\n\n\n\n\n\npush\n\n\nBoolean\n\n\nTrue\n\n\ngit.commit\n\n\nPush the commit to git as well.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\ngit.commit\n\n\nCredentials to use when pushing to git origin.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\ncommit\n\n\n\n\nCommit and push changes within your pipeline. Generally should be used for generated documentation changes. Use at your own risk.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nString\n\n\nAutomatic commit from {{ job_url }}\n\n\nThe message to attach to the commit.\n\n\n\n\n\n\npattern\n\n\nString\n\n\n.\n\n\nPattern for the \ngit add\n command.\n\n\n\n\n\n\nauthor\n\n\nString\n\n\n${env.GIT_AUTHOR} <${env.GIT_EMAIL}>\n\n\nAuthor of this commit in standard git format \nName <email@domain.com>\n.\n\n\n\n\n\n\namend\n\n\nBoolean\n\n\nFalse\n\n\nWhether to amend the previous commit.\n\n\n\n\n\n\npush\n\n\nBoolean\n\n\nTrue\n\n\nPush the commit to git as well.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\nCredentials to use when pushing to git origin.\n\n\n\n\n\n\n\n\ncommit Example\n\n\nbranches:\n  feature:\n    steps:\n      - git:\n          # Simple\n          - commit: \"Example email from {{ build_url }}\"\n          # Advanced\n          - commit:\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    git:\n      credentials:\n        description: Git credentials\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - git:\n          - commit:\n              message: Automatic commit from pipeline.\n\n\n\n\nAdditional Resources\n\n\n\n\nOfficial documentation on commits",
            "title": "Git"
        },
        {
            "location": "/GIT/#git",
            "text": "",
            "title": "Git"
        },
        {
            "location": "/GIT/#overview",
            "text": "Various git functions for use within your pipeline.  NOTE : You are fully responsible for usage of this workflow, there is potential to cause bad commits.",
            "title": "Overview"
        },
        {
            "location": "/GIT/#tools-section",
            "text": "Name  Type  Default  Section  Description      message  String  Automatic commit from {{ job_url }}  git.commit  The message to attach to the commit.    pattern  String  .  git.commit  Pattern for the  git add  command.    author  String  ${env.GIT_AUTHOR} <${env.GIT_EMAIL}>  git.commit  Author of this commit.    amend  Boolean  False  git.commit  Whether to amend the previous commit.    push  Boolean  True  git.commit  Push the commit to git as well.    credentials  Map   git.commit  Credentials to use when pushing to git origin.",
            "title": "Tools Section"
        },
        {
            "location": "/GIT/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/GIT/#commit",
            "text": "Commit and push changes within your pipeline. Generally should be used for generated documentation changes. Use at your own risk.      Name  Type  Default  Description      message  String  Automatic commit from {{ job_url }}  The message to attach to the commit.    pattern  String  .  Pattern for the  git add  command.    author  String  ${env.GIT_AUTHOR} <${env.GIT_EMAIL}>  Author of this commit in standard git format  Name <email@domain.com> .    amend  Boolean  False  Whether to amend the previous commit.    push  Boolean  True  Push the commit to git as well.    credentials  Map   Credentials to use when pushing to git origin.",
            "title": "commit"
        },
        {
            "location": "/GIT/#commit-example",
            "text": "branches:\n  feature:\n    steps:\n      - git:\n          # Simple\n          - commit: \"Example email from {{ build_url }}\"\n          # Advanced\n          - commit:",
            "title": "commit Example"
        },
        {
            "location": "/GIT/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    git:\n      credentials:\n        description: Git credentials\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - custom: # This should be your build process\n          - buildPackage:\n        - git:\n          - commit:\n              message: Automatic commit from pipeline.",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/GIT/#additional-resources",
            "text": "Official documentation on commits",
            "title": "Additional Resources"
        },
        {
            "location": "/GITHUB/",
            "text": "GitHub\n\n\nOverview\n\n\n\n\nSteps for interacting with GitHub.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatterns.master\n\n\nString\n\n\nmaster\n\n\nbranches\n\n\nThe branch the PR will be merged into, also referred to as baseRef.\n\n\n\n\n\n\nhost\n\n\nString\n\n\ndetermined by SCM config.\n\n\ngithub\n\n\nThe URL for the API for the GitHub instance.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\ngithub\n\n\nCredentials to use when authenticating against the GitHub instance.\n\n\n\n\n\n\nchangelogFile\n\n\nString\n\n\nCHANGELOG.md\n\n\ngithub.changelog\n\n\nName or path to your changelog file, typically this should be a file called CHANGELOG.md in the root of your project.\n\n\n\n\n\n\nseparator\n\n\nString\n\n\n##\n\n\ngithub.changelog\n\n\nShould match what the header for your releases are, and it should be consistent for all releases.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\ncreatePullRequest\n\n\n\n\nCreate a Pull Request in GitHub.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfromBranch\n\n\nString\n\n\n<branch_name>\n\n\nThe branch the PR will be merged from, also referred to as headRef.\n\n\n\n\n\n\ntoBranch\n\n\nString\n\n\nmaster\n\n\nThe branch the PR will be merged into, also referred to as baseRef.\n\n\n\n\n\n\ngithubHost\n\n\nString\n\n\ndetermined by SCM config.\n\n\nThe URL for the API for the GitHub instance.\n\n\n\n\n\n\ncredentials\n\n\nMap\n\n\n\n\nCredentials to use when authenticating against the GitHub instance.\n\n\n\n\n\n\norg\n\n\nString\n\n\ndetermined by SCM config.\n\n\nOrganization/Owner of the repository.\n\n\n\n\n\n\nrepo\n\n\nString\n\n\ndetermined by SCM config.\n\n\nThe name of the repo for to create PR for.\n\n\n\n\n\n\ntitle\n\n\nString\n\n\nMerge {{ from_branch }} into {{ target_branch }}\n\n\nName of the pull request.\n\n\n\n\n\n\nsummary\n\n\nString\n\n\nCreated by Buildhub run {{ build_url }}. Will load a template if available.\n\n\nA brief summary of the pull request.\n\n\n\n\n\n\n\n\ncreatePullRequest Example\n\n\nbranches:\n  feature:\n    steps:\n      - github:\n          # Simple\n          - createPullRequest:\n          # Advanced\n          - createPullRequest:\n              toBranch: develop\n              title: Fix for issue {{ branch_name }}.\n\n\n\n\ncreateRelease\n\n\n\n\nCreate a release with notes from a CHANGELOG.md\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchangelogFile\n\n\nString\n\n\nCHANGELOG.md\n\n\nName or path to your changelog file, typically this should be a file called CHANGELOG.md in the root of your project.\n\n\n\n\n\n\nseparator\n\n\nString\n\n\n##\n\n\nShould match what the header for your releases are, and it should be consistent for all releases.\n\n\n\n\n\n\nname\n\n\nString\n\n\nDetermined by last tag, prefixed with\nv``\n\n\nThe display name of the release in GitHub.\n\n\n\n\n\n\ntag\n\n\nString\n\n\nDetermined by last tag, prefixed with\nv``\n\n\nThe Git tag that will be created for this release.\n\n\n\n\n\n\npreRelease\n\n\nBoolean\n\n\n\n\nMark the release as a pre-release.\n\n\n\n\n\n\ndraft\n\n\nBoolean\n\n\n\n\nMark the release as a draft.\n\n\n\n\n\n\nnotes\n\n\nString\n\n\n\n\nOptionally provide the notes directly in pipelines.yml, not recommended.\n\n\n\n\n\n\n\n\ncreateRelease Example\n\n\nbranches:\n  feature:\n    steps:\n      - github:\n          # Simple\n          - createRelease:\n          # Advanced\n          - createRelease:\n              name: 0.1.0-alpha\n              notes: |\n                ### New Features\n                * Pipeline execution\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - github:\n          - createPullRequest:\n\n\n\n\nAdditional Resources\n\n\n\n\nGitHub API\n\n\nGitHub PR and Issue Templates\n\n\nKeep a Changelog",
            "title": "Github"
        },
        {
            "location": "/GITHUB/#github",
            "text": "",
            "title": "GitHub"
        },
        {
            "location": "/GITHUB/#overview",
            "text": "Steps for interacting with GitHub.",
            "title": "Overview"
        },
        {
            "location": "/GITHUB/#tools-section",
            "text": "Name  Type  Default  Section  Description      patterns.master  String  master  branches  The branch the PR will be merged into, also referred to as baseRef.    host  String  determined by SCM config.  github  The URL for the API for the GitHub instance.    credentials  Map   github  Credentials to use when authenticating against the GitHub instance.    changelogFile  String  CHANGELOG.md  github.changelog  Name or path to your changelog file, typically this should be a file called CHANGELOG.md in the root of your project.    separator  String  ##  github.changelog  Should match what the header for your releases are, and it should be consistent for all releases.",
            "title": "Tools Section"
        },
        {
            "location": "/GITHUB/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/GITHUB/#createpullrequest",
            "text": "Create a Pull Request in GitHub.      Name  Type  Default  Description      fromBranch  String  <branch_name>  The branch the PR will be merged from, also referred to as headRef.    toBranch  String  master  The branch the PR will be merged into, also referred to as baseRef.    githubHost  String  determined by SCM config.  The URL for the API for the GitHub instance.    credentials  Map   Credentials to use when authenticating against the GitHub instance.    org  String  determined by SCM config.  Organization/Owner of the repository.    repo  String  determined by SCM config.  The name of the repo for to create PR for.    title  String  Merge {{ from_branch }} into {{ target_branch }}  Name of the pull request.    summary  String  Created by Buildhub run {{ build_url }}. Will load a template if available.  A brief summary of the pull request.",
            "title": "createPullRequest"
        },
        {
            "location": "/GITHUB/#createpullrequest-example",
            "text": "branches:\n  feature:\n    steps:\n      - github:\n          # Simple\n          - createPullRequest:\n          # Advanced\n          - createPullRequest:\n              toBranch: develop\n              title: Fix for issue {{ branch_name }}.",
            "title": "createPullRequest Example"
        },
        {
            "location": "/GITHUB/#createrelease",
            "text": "Create a release with notes from a CHANGELOG.md      Name  Type  Default  Description      changelogFile  String  CHANGELOG.md  Name or path to your changelog file, typically this should be a file called CHANGELOG.md in the root of your project.    separator  String  ##  Should match what the header for your releases are, and it should be consistent for all releases.    name  String  Determined by last tag, prefixed with v``  The display name of the release in GitHub.    tag  String  Determined by last tag, prefixed with v``  The Git tag that will be created for this release.    preRelease  Boolean   Mark the release as a pre-release.    draft  Boolean   Mark the release as a draft.    notes  String   Optionally provide the notes directly in pipelines.yml, not recommended.",
            "title": "createRelease"
        },
        {
            "location": "/GITHUB/#createrelease-example",
            "text": "branches:\n  feature:\n    steps:\n      - github:\n          # Simple\n          - createRelease:\n          # Advanced\n          - createRelease:\n              name: 0.1.0-alpha\n              notes: |\n                ### New Features\n                * Pipeline execution",
            "title": "createRelease Example"
        },
        {
            "location": "/GITHUB/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        master: master\n        develop: develop\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - github:\n          - createPullRequest:",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/GITHUB/#additional-resources",
            "text": "GitHub API  GitHub PR and Issue Templates  Keep a Changelog",
            "title": "Additional Resources"
        },
        {
            "location": "/GOLANG/",
            "text": "Golang\n\n\nOverview\n\n\n\n\nSteps for building and testing with Golang.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\ngolang\n\n\nDocker image that has Golang/Glide/Godep installed.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\nglide\n\n\nAny additional arguments to Glide as a YAML style List.\n\n\n\n\n\n\ncommand\n\n\n\n\nString\n\n\ninstall\n\n\nglide\n\n\nWhich Glide command to run.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\ngodep\n\n\nAny additional arguments to Godep as a YAML style List.\n\n\n\n\n\n\ncommand\n\n\n\n\nString\n\n\nrestore\n\n\ngodep\n\n\nWhich Godep command to run.\n\n\n\n\n\n\ngoPath\n\n\n\n\nString\n\n\ndetermined by SCM\n\n\ngolang\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\noutFile\n\n\n\n\nString\n\n\n\n\ngolang\n\n\nWhere the built Go binary will be put instead of the current directory.\n\n\n\n\n\n\nenv\n\n\n\n\nMap\n\n\n\n\ngolang\n\n\nSetup for the build environment, for example setting GOOS or GOARCH.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\ngolang\n\n\nAny additional arguments to \ngo build\n as a YAML style List.\n\n\n\n\n\n\nmainPath\n\n\n\n\nString\n\n\n\n\ngolang\n\n\nPath to the main .go file to build.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\ntest\n\n\nAdditional arguments to the test binary specified.\n\n\n\n\n\n\nbinary\n\n\n\n\nString\n\n\ngo test\n\n\ntest\n\n\nThe binary to use for the test, in case a different framework is being used.\n\n\n\n\n\n\nresultsPath\n\n\n\n\nString\n\n\ntest_results\n\n\ntest\n\n\nIf a test framework, such as Gingko, that can output to Junit is being used this is the path to the directory.\n\n\n\n\n\n\ngatherJunit\n\n\n\n\nBoolean\n\n\nFalse\n\n\ngolang\n\n\nIf a test framework, such as Gingko, that can output to Junit this will ensure that the test results are published in Jenkins.\n\n\n\n\n\n\njunitPattern\n\n\n\n\nString\n\n\n${resultsPath}/*.xml\n\n\ngolang\n\n\nAn ant style pattern for the junit plugin, should match where your test results get stored.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nglide\n\n\n\n\nVendor Package Management for your Go projects.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image that has Glide installed.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\nAny additional arguments to Glide as a YAML style List.\n\n\n\n\n\n\ncommand\n\n\n\n\nString\n\n\ninstall\n\n\nWhich Glide command to run.\n\n\n\n\n\n\ngoPath\n\n\n\n\nString\n\n\ndetermined by SCM\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\n\n\nglide Example\n\n\nbranches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - glide:\n          # Advanced\n          - glide:\n              command: install\n              additionalArgs:\n                - \"--force\"\n\n\n\n\ndep\n\n\n\n\nDep is a tool for managing Go package dependencies.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image that has Godep installed.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\nAny additional arguments to Godep as a YAML style List.\n\n\n\n\n\n\ncommand\n\n\n\n\nString\n\n\nrestore\n\n\nWhich Godep command to run.\n\n\n\n\n\n\ngoPath\n\n\n\n\nString\n\n\ndetermined by SCM\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\n\n\ndep Example\n\n\nbranches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - dep:\n          # Advanced\n          - dep:\n              additionalArgs:\n                - \"-v\"\n                - \"-update\"\n\n\n\n\nlint\n\n\n\n\nBuild a Golang project.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image that has the linting tool installed.\n\n\n\n\n\n\nadditionalFlags\n\n\nList\n\n\n\n\nAny additional arguments to the linting tool as a YAML style List.\n\n\n\n\n\n\nenable\n\n\nList\n\n\n[]\n\n\nA list of linters to enable.\n\n\n\n\n\n\nbinary\n\n\nString\n\n\ngometalinter\n\n\nThe binary you want to use for linting.\n\n\n\n\n\n\ngoPath\n\n\nString\n\n\ngetGoPath()\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\n\n\nlint Example\n\n\nbranches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - lint:\n          # Advanced\n          - lint:\n              binary: gometalinter.v1\n              enable:\n                - vet\n                - deadcode\n                - goconst\n                - errcheck\n                - goimports\n              additionalFlags:\n                - tests\n\n\n\n\nbuild\n\n\n\n\nBuild a Golang project.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\n\n\nDocker image that has any Golang installed.\n\n\n\n\n\n\ngoPath\n\n\n\n\nString\n\n\ndetermined by SCM\n\n\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\noutFile\n\n\n\n\nString\n\n\n\n\ngolang\n\n\nWhere the built Go binary will be put instead of the current directory.\n\n\n\n\n\n\nenv\n\n\n\n\nMap\n\n\n\n\ngolang\n\n\nSetup for the build environment, for example setting GOOS or GOARCH.\n\n\n\n\n\n\nmainPath\n\n\n\n\nString\n\n\n\n\ngolang\n\n\nPath to the main .go file to build.\n\n\n\n\n\n\n\n\nbuild Example\n\n\nbranches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - build:\n          # Advanced\n          - build:\n              outFile: \"publish/example-binary\"\n              mainPath: \"cmd/app/main.go\"\n              env:\n                GOOS: linux\n                GOARCH: amd64\n\n\n\n\ntest\n\n\n\n\nBuild a Golang project.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image that has any Golang installed.\n\n\n\n\n\n\ngoPath\n\n\n\n\nString\n\n\ndetermined by SCM\n\n\nThe path within the container to mount the project into.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\nAny additional arguments to Glide as a YAML style List.\n\n\n\n\n\n\nbinary\n\n\n\n\nString\n\n\ngo test\n\n\nThe binary to use for the test, in case a different framework is being used.\n\n\n\n\n\n\nresultsPath\n\n\n\n\nString\n\n\ntest_results\n\n\nIf a test framework, such as Gingko, that can output to Junit is being used this is the path to the directory.\n\n\n\n\n\n\ngatherJunit\n\n\n\n\nBoolean\n\n\nFalse\n\n\nIf a test framework, such as Gingko, that can output to Junit this will ensure that the test results are published in Jenkins.\n\n\n\n\n\n\njunitPattern\n\n\n\n\nString\n\n\n${resultsPath}/*.xml\n\n\nAn ant style pattern for the junit plugin, should match where your test results get stored.\n\n\n\n\n\n\n\n\ntest Example\n\n\nbranches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - test:\n          # Advanced\n          - test:\n              binary: ginkgo\n              additionalArgs:\n                - \"./...\"\n              gatherJunit: true\n              resultsPath: results\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - golang:\n          - glide:\n          - test:\n              binary: ginkgo\n              gatherJunit: true\n          - build:\n              mainPath: cmd/app/main.go\n              outFile: publish/app\n              env:\n                GOOS: darwin\n                GOARCH: amd64\n\n\n\n\nAdditional Resources\n\n\n\n\nGlide\n\n\nDep\n\n\nGolang\n\n\nDocker Images",
            "title": "Golang"
        },
        {
            "location": "/GOLANG/#golang",
            "text": "",
            "title": "Golang"
        },
        {
            "location": "/GOLANG/#overview",
            "text": "Steps for building and testing with Golang.",
            "title": "Overview"
        },
        {
            "location": "/GOLANG/#tools-section",
            "text": "Name  Required  Type  Default  Section  Description      buildImage  Required  String   golang  Docker image that has Golang/Glide/Godep installed.    additionalArgs   List   glide  Any additional arguments to Glide as a YAML style List.    command   String  install  glide  Which Glide command to run.    additionalArgs   List   godep  Any additional arguments to Godep as a YAML style List.    command   String  restore  godep  Which Godep command to run.    goPath   String  determined by SCM  golang  The path within the container to mount the project into.    outFile   String   golang  Where the built Go binary will be put instead of the current directory.    env   Map   golang  Setup for the build environment, for example setting GOOS or GOARCH.    additionalArgs   List   golang  Any additional arguments to  go build  as a YAML style List.    mainPath   String   golang  Path to the main .go file to build.    additionalArgs   List   test  Additional arguments to the test binary specified.    binary   String  go test  test  The binary to use for the test, in case a different framework is being used.    resultsPath   String  test_results  test  If a test framework, such as Gingko, that can output to Junit is being used this is the path to the directory.    gatherJunit   Boolean  False  golang  If a test framework, such as Gingko, that can output to Junit this will ensure that the test results are published in Jenkins.    junitPattern   String  ${resultsPath}/*.xml  golang  An ant style pattern for the junit plugin, should match where your test results get stored.",
            "title": "Tools Section"
        },
        {
            "location": "/GOLANG/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/GOLANG/#glide",
            "text": "Vendor Package Management for your Go projects.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image that has Glide installed.    additionalArgs   List   Any additional arguments to Glide as a YAML style List.    command   String  install  Which Glide command to run.    goPath   String  determined by SCM  The path within the container to mount the project into.",
            "title": "glide"
        },
        {
            "location": "/GOLANG/#glide-example",
            "text": "branches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - glide:\n          # Advanced\n          - glide:\n              command: install\n              additionalArgs:\n                - \"--force\"",
            "title": "glide Example"
        },
        {
            "location": "/GOLANG/#dep",
            "text": "Dep is a tool for managing Go package dependencies.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image that has Godep installed.    additionalArgs   List   Any additional arguments to Godep as a YAML style List.    command   String  restore  Which Godep command to run.    goPath   String  determined by SCM  The path within the container to mount the project into.",
            "title": "dep"
        },
        {
            "location": "/GOLANG/#dep-example",
            "text": "branches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - dep:\n          # Advanced\n          - dep:\n              additionalArgs:\n                - \"-v\"\n                - \"-update\"",
            "title": "dep Example"
        },
        {
            "location": "/GOLANG/#lint",
            "text": "Build a Golang project.      Name  Type  Default  Description      buildImage  String   Docker image that has the linting tool installed.    additionalFlags  List   Any additional arguments to the linting tool as a YAML style List.    enable  List  []  A list of linters to enable.    binary  String  gometalinter  The binary you want to use for linting.    goPath  String  getGoPath()  The path within the container to mount the project into.",
            "title": "lint"
        },
        {
            "location": "/GOLANG/#lint-example",
            "text": "branches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - lint:\n          # Advanced\n          - lint:\n              binary: gometalinter.v1\n              enable:\n                - vet\n                - deadcode\n                - goconst\n                - errcheck\n                - goimports\n              additionalFlags:\n                - tests",
            "title": "lint Example"
        },
        {
            "location": "/GOLANG/#build",
            "text": "Build a Golang project.      Name  Required  Type  Default  Section  Description      buildImage  Required  String    Docker image that has any Golang installed.    goPath   String  determined by SCM   The path within the container to mount the project into.    outFile   String   golang  Where the built Go binary will be put instead of the current directory.    env   Map   golang  Setup for the build environment, for example setting GOOS or GOARCH.    mainPath   String   golang  Path to the main .go file to build.",
            "title": "build"
        },
        {
            "location": "/GOLANG/#build-example",
            "text": "branches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - build:\n          # Advanced\n          - build:\n              outFile: \"publish/example-binary\"\n              mainPath: \"cmd/app/main.go\"\n              env:\n                GOOS: linux\n                GOARCH: amd64",
            "title": "build Example"
        },
        {
            "location": "/GOLANG/#test",
            "text": "Build a Golang project.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image that has any Golang installed.    goPath   String  determined by SCM  The path within the container to mount the project into.    additionalArgs   List   Any additional arguments to Glide as a YAML style List.    binary   String  go test  The binary to use for the test, in case a different framework is being used.    resultsPath   String  test_results  If a test framework, such as Gingko, that can output to Junit is being used this is the path to the directory.    gatherJunit   Boolean  False  If a test framework, such as Gingko, that can output to Junit this will ensure that the test results are published in Jenkins.    junitPattern   String  ${resultsPath}/*.xml  An ant style pattern for the junit plugin, should match where your test results get stored.",
            "title": "test"
        },
        {
            "location": "/GOLANG/#test-example",
            "text": "branches:\n  feature:\n    steps:\n      - golang:\n          # Simple\n          - test:\n          # Advanced\n          - test:\n              binary: ginkgo\n              additionalArgs:\n                - \"./...\"\n              gatherJunit: true\n              resultsPath: results",
            "title": "test Example"
        },
        {
            "location": "/GOLANG/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - golang:\n          - glide:\n          - test:\n              binary: ginkgo\n              gatherJunit: true\n          - build:\n              mainPath: cmd/app/main.go\n              outFile: publish/app\n              env:\n                GOOS: darwin\n                GOARCH: amd64",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/GOLANG/#additional-resources",
            "text": "Glide  Dep  Golang  Docker Images",
            "title": "Additional Resources"
        },
        {
            "location": "/GRADLE/",
            "text": "Gradle\n\n\nOverview\n\n\n\n\nExecute any Gradle task.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image containing Gradle and any other necessary tools for the project to build.\n\n\n\n\n\n\nbinary\n\n\nString\n\n\n./gradlew\n\n\nThe Gradle binary to use, typically this would be \ngradlew\n or \ngradle\n.\n\n\n\n\n\n\ntask\n\n\nString\n\n\nbuild\n\n\nThe name of the task to execute, multiple tasks can be separated by a space.\n\n\n\n\n\n\nextraArgs\n\n\nList\n\n\n\n\nAny additional arguments to apply to the Gradle task.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\ntask\n\n\n\n\nExecute Gradle tasks.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image containing Gradle and any other necessary tools for the project to build.\n\n\n\n\n\n\nbinary\n\n\nString\n\n\n./gradlew\n\n\nThe Gradle binary to use, typically this would be \ngradlew\n or \ngradle\n.\n\n\n\n\n\n\nname\n\n\nString\n\n\nbuild\n\n\nThe name of the task to execute, multiple tasks can be separated by a space.\n\n\n\n\n\n\nextraArgs\n\n\nList\n\n\n\n\nAny additional arguments to apply to the Gradle task.\n\n\n\n\n\n\n\n\ntask Example\n\n\nbranches:\n  feature:\n    steps:\n      - gradle:\n          # Simple\n          - task:\n          # Advanced\n          - task:\n              binary: gradle\n              name: compile\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    gradle:\n      buildImage: gradle:4.4-jdk9\n  branches:\n    feature:\n      steps:\n        - gradle:\n          - task:\n              binary: gradle\n              task: \"test build publish\"\n\n\n\n\nAdditional Resources\n\n\n\n\nGradle Official\n\n\nDocker images",
            "title": "Gradle"
        },
        {
            "location": "/GRADLE/#gradle",
            "text": "",
            "title": "Gradle"
        },
        {
            "location": "/GRADLE/#overview",
            "text": "Execute any Gradle task.",
            "title": "Overview"
        },
        {
            "location": "/GRADLE/#tools-section",
            "text": "Name  Type  Default  Description      buildImage  String   Docker image containing Gradle and any other necessary tools for the project to build.    binary  String  ./gradlew  The Gradle binary to use, typically this would be  gradlew  or  gradle .    task  String  build  The name of the task to execute, multiple tasks can be separated by a space.    extraArgs  List   Any additional arguments to apply to the Gradle task.",
            "title": "Tools Section"
        },
        {
            "location": "/GRADLE/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/GRADLE/#task",
            "text": "Execute Gradle tasks.      Name  Type  Default  Description      buildImage  String   Docker image containing Gradle and any other necessary tools for the project to build.    binary  String  ./gradlew  The Gradle binary to use, typically this would be  gradlew  or  gradle .    name  String  build  The name of the task to execute, multiple tasks can be separated by a space.    extraArgs  List   Any additional arguments to apply to the Gradle task.",
            "title": "task"
        },
        {
            "location": "/GRADLE/#task-example",
            "text": "branches:\n  feature:\n    steps:\n      - gradle:\n          # Simple\n          - task:\n          # Advanced\n          - task:\n              binary: gradle\n              name: compile",
            "title": "task Example"
        },
        {
            "location": "/GRADLE/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    gradle:\n      buildImage: gradle:4.4-jdk9\n  branches:\n    feature:\n      steps:\n        - gradle:\n          - task:\n              binary: gradle\n              task: \"test build publish\"",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/GRADLE/#additional-resources",
            "text": "Gradle Official  Docker images",
            "title": "Additional Resources"
        },
        {
            "location": "/NODEJS/",
            "text": "NodeJS\n\n\nOverview\n\n\n\n\nExecute any NPM, Grunt or Gulp task.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerImage\n\n\nString\n\n\n\n\nnodejs\n\n\nDocker image to run all NodeJS commands in.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nnodejs.npm\n\n\nAdditional arguments to the NPM commands.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nnodejs.npm\n\n\nThe NPM command to run within a nodejs.npm workflow step.\n\n\n\n\n\n\nnpmRegistry\n\n\nString\n\n\n\n\nnodejs.npm\n\n\nURL to an alternate NPM registry.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nnodejs.gulp\n\n\nAdditional arguments to a Gulp command.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nnodejs.gulp\n\n\nThe Gulp command to run within a nodejs.gulp workflow step.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nnodejs.grunt\n\n\nAdditional arguments to a Grunt command.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nnodejs.grunt\n\n\nThe Grunt command to run within a nodejs.grunt workflow step.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nnpm\n\n\n\n\nExecute NPM tasks.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerImage\n\n\nString\n\n\n\n\nDocker image to run all NodeJS commands in.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nAdditional arguments to the NPM commands.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nThe NPM command to run within a nodejs.npm workflow step.\n\n\n\n\n\n\nnpmRegistry\n\n\nString\n\n\n\n\nURL to an alternate NPM registry.\n\n\n\n\n\n\n\n\nnpm Example\n\n\nbranches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - node:\n          # Advanced\n          - node:\n              command: compile\n\n\n\n\ngulp\n\n\n\n\nExecute Gulp tasks.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerImage\n\n\nString\n\n\n\n\nDocker image to run all NodeJS commands in.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nAdditional arguments to a Gulp command.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nThe Gulp command to run within a nodejs.gulp workflow step.\n\n\n\n\n\n\n\n\ngulp Example\n\n\nbranches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - gulp:\n          # Advanced\n          - gulp:\n              name: compileScss\n\n\n\n\ngrunt\n\n\n\n\nExecute Grunt tasks.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndockerImage\n\n\nString\n\n\n\n\nDocker image to run all NodeJS commands in.\n\n\n\n\n\n\ncommandArgs\n\n\nList\n\n\n\n\nAdditional arguments to a Grunt command.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\ninstall\n\n\nThe Grunt command to run within a nodejs.grunt workflow step.\n\n\n\n\n\n\n\n\ngrunt Example\n\n\nbranches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - grunt:\n          # Advanced\n          - grunt:\n              name: webpack\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    nodejs:\n      buildImage: node:9.3-alpine\n  branches:\n    feature:\n      steps:\n        - nodejs:\n          - npm:\n        - docker:\n          - build:\n          - push:\n\n\n\n\nAdditional Resources\n\n\n\n\nNodeJS Official Site\n\n\nNPM\n\n\nGrunt\n\n\nGulp\n\n\nDocker Images",
            "title": "Nodejs"
        },
        {
            "location": "/NODEJS/#nodejs",
            "text": "",
            "title": "NodeJS"
        },
        {
            "location": "/NODEJS/#overview",
            "text": "Execute any NPM, Grunt or Gulp task.",
            "title": "Overview"
        },
        {
            "location": "/NODEJS/#tools-section",
            "text": "Name  Type  Default  Section  Description      dockerImage  String   nodejs  Docker image to run all NodeJS commands in.    commandArgs  List   nodejs.npm  Additional arguments to the NPM commands.    command  String  install  nodejs.npm  The NPM command to run within a nodejs.npm workflow step.    npmRegistry  String   nodejs.npm  URL to an alternate NPM registry.    commandArgs  List   nodejs.gulp  Additional arguments to a Gulp command.    command  String  install  nodejs.gulp  The Gulp command to run within a nodejs.gulp workflow step.    commandArgs  List   nodejs.grunt  Additional arguments to a Grunt command.    command  String  install  nodejs.grunt  The Grunt command to run within a nodejs.grunt workflow step.",
            "title": "Tools Section"
        },
        {
            "location": "/NODEJS/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/NODEJS/#npm",
            "text": "Execute NPM tasks.      Name  Type  Default  Description      dockerImage  String   Docker image to run all NodeJS commands in.    commandArgs  List   Additional arguments to the NPM commands.    command  String  install  The NPM command to run within a nodejs.npm workflow step.    npmRegistry  String   URL to an alternate NPM registry.",
            "title": "npm"
        },
        {
            "location": "/NODEJS/#npm-example",
            "text": "branches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - node:\n          # Advanced\n          - node:\n              command: compile",
            "title": "npm Example"
        },
        {
            "location": "/NODEJS/#gulp",
            "text": "Execute Gulp tasks.      Name  Type  Default  Description      dockerImage  String   Docker image to run all NodeJS commands in.    commandArgs  List   Additional arguments to a Gulp command.    command  String  install  The Gulp command to run within a nodejs.gulp workflow step.",
            "title": "gulp"
        },
        {
            "location": "/NODEJS/#gulp-example",
            "text": "branches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - gulp:\n          # Advanced\n          - gulp:\n              name: compileScss",
            "title": "gulp Example"
        },
        {
            "location": "/NODEJS/#grunt",
            "text": "Execute Grunt tasks.      Name  Type  Default  Description      dockerImage  String   Docker image to run all NodeJS commands in.    commandArgs  List   Additional arguments to a Grunt command.    command  String  install  The Grunt command to run within a nodejs.grunt workflow step.",
            "title": "grunt"
        },
        {
            "location": "/NODEJS/#grunt-example",
            "text": "branches:\n  feature:\n    steps:\n      - nodejs:\n          # Simple\n          - grunt:\n          # Advanced\n          - grunt:\n              name: webpack",
            "title": "grunt Example"
        },
        {
            "location": "/NODEJS/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    nodejs:\n      buildImage: node:9.3-alpine\n  branches:\n    feature:\n      steps:\n        - nodejs:\n          - npm:\n        - docker:\n          - build:\n          - push:",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/NODEJS/#additional-resources",
            "text": "NodeJS Official Site  NPM  Grunt  Gulp  Docker Images",
            "title": "Additional Resources"
        },
        {
            "location": "/PYTHON/",
            "text": "Python\n\n\nOverview\n\n\n\n\nRun Python scripts.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image containing Python and any non requirements.txt dependencies.\n\n\n\n\n\n\nbinary\n\n\nOptional\n\n\nString\n\n\npython\n\n\nThe Python binary to use, for example \npython2\n or \npython3\n.\n\n\n\n\n\n\nfile\n\n\nRequired\n\n\nString\n\n\n\n\nPath to a script to run, relative to the root of the project.\n\n\n\n\n\n\nrequirements\n\n\nOptional\n\n\nString\n\n\nrequirements.txt\n\n\nPath to a requirements.txt file to install via Pip.\n\n\n\n\n\n\narguments\n\n\nOptional\n\n\nList\n\n\n\n\nList of arguments to the script, should include any flags if needed.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nscript\n\n\n\n\nRun a Python script.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image containing Python and any non requirements.txt dependencies.\n\n\n\n\n\n\nbinary\n\n\nOptional\n\n\nString\n\n\npython\n\n\nThe Python binary to use, for example \npython2\n or \npython3\n.\n\n\n\n\n\n\nfile\n\n\nRequired\n\n\nString\n\n\n\n\nPath to a script to run, relative to the root of the project.\n\n\n\n\n\n\nrequirements\n\n\nOptional\n\n\nString\n\n\nrequirements.txt\n\n\nPath to a requirements.txt file to install via Pip.\n\n\n\n\n\n\narguments\n\n\nOptional\n\n\nList\n\n\n\n\nList of arguments to the script, should include any flags if needed.\n\n\n\n\n\n\n\n\nscript Example\n\n\nbranches:\n  feature:\n    steps:\n      - python:\n          # Simple\n          - script:\n          # Advanced\n          - script:\n              binary: python3\n              script: scripts/update_docs.py\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    python:\n      buildImage: \"python:3.6-alpine3.7\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - python:\n          - script:\n              file: scripts/build.py\n\n\n\n\nAdditional Resources\n\n\n\n\nDocker images",
            "title": "Python"
        },
        {
            "location": "/PYTHON/#python",
            "text": "",
            "title": "Python"
        },
        {
            "location": "/PYTHON/#overview",
            "text": "Run Python scripts.",
            "title": "Overview"
        },
        {
            "location": "/PYTHON/#tools-section",
            "text": "Name  Required  Type  Default  Description      buildImage  Required  String   Docker image containing Python and any non requirements.txt dependencies.    binary  Optional  String  python  The Python binary to use, for example  python2  or  python3 .    file  Required  String   Path to a script to run, relative to the root of the project.    requirements  Optional  String  requirements.txt  Path to a requirements.txt file to install via Pip.    arguments  Optional  List   List of arguments to the script, should include any flags if needed.",
            "title": "Tools Section"
        },
        {
            "location": "/PYTHON/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/PYTHON/#script",
            "text": "Run a Python script.      Name  Required  Type  Default  Description      buildImage  Required  String   Docker image containing Python and any non requirements.txt dependencies.    binary  Optional  String  python  The Python binary to use, for example  python2  or  python3 .    file  Required  String   Path to a script to run, relative to the root of the project.    requirements  Optional  String  requirements.txt  Path to a requirements.txt file to install via Pip.    arguments  Optional  List   List of arguments to the script, should include any flags if needed.",
            "title": "script"
        },
        {
            "location": "/PYTHON/#script-example",
            "text": "branches:\n  feature:\n    steps:\n      - python:\n          # Simple\n          - script:\n          # Advanced\n          - script:\n              binary: python3\n              script: scripts/update_docs.py",
            "title": "script Example"
        },
        {
            "location": "/PYTHON/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    python:\n      buildImage: \"python:3.6-alpine3.7\"\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - python:\n          - script:\n              file: scripts/build.py",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/PYTHON/#additional-resources",
            "text": "Docker images",
            "title": "Additional Resources"
        },
        {
            "location": "/RUST/",
            "text": "Rust\n\n\nOverview\n\n\n\n\nSteps for building and testing with Golang.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nRequired\n\n\nString\n\n\n\n\nDocker image containg tools for Rust.\n\n\n\n\n\n\nadditionalArgs\n\n\n\n\nList\n\n\n\n\nA list of additional flags to send to the cargo command.\n\n\n\n\n\n\ncomponents\n\n\n\n\nList\n\n\n\n\nAdditional rustup components to install.\n\n\n\n\n\n\ncommand\n\n\n\n\nString\n\n\nbuild\n\n\nWhich cargo command to execute.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\ncargo\n\n\n\n\nCreate a Pull Request in GitHub.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildImage\n\n\nString\n\n\n\n\nDocker image containg tools for Rust.\n\n\n\n\n\n\nadditionalArgs\n\n\nList\n\n\n\n\nA list of additional flags to send to the cargo command.\n\n\n\n\n\n\ncomponents\n\n\nList\n\n\n\n\nAdditional rustup components to install.\n\n\n\n\n\n\ncommand\n\n\nString\n\n\nbuild\n\n\nWhich cargo command to execute.\n\n\n\n\n\n\n\n\ncargo Example\n\n\nbranches:\n  feature:\n    steps:\n      - rust:\n          # Simple\n          - cargo:\n          # Advanced\n          - cargo:\n              command: build\n              title: Fix for issue {{ branch_name }}.\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - rust:\n          - cargo:\n              command: build\n\n\n\n\nAdditional Resources\n\n\n\n\nRust\n\n\nCargo\n\n\nDocker Images",
            "title": "Rust"
        },
        {
            "location": "/RUST/#rust",
            "text": "",
            "title": "Rust"
        },
        {
            "location": "/RUST/#overview",
            "text": "Steps for building and testing with Golang.",
            "title": "Overview"
        },
        {
            "location": "/RUST/#tools-section",
            "text": "Name  Required  Type  Default  Description      buildImage  Required  String   Docker image containg tools for Rust.    additionalArgs   List   A list of additional flags to send to the cargo command.    components   List   Additional rustup components to install.    command   String  build  Which cargo command to execute.",
            "title": "Tools Section"
        },
        {
            "location": "/RUST/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/RUST/#cargo",
            "text": "Create a Pull Request in GitHub.      Name  Type  Default  Description      buildImage  String   Docker image containg tools for Rust.    additionalArgs  List   A list of additional flags to send to the cargo command.    components  List   Additional rustup components to install.    command  String  build  Which cargo command to execute.",
            "title": "cargo"
        },
        {
            "location": "/RUST/#cargo-example",
            "text": "branches:\n  feature:\n    steps:\n      - rust:\n          # Simple\n          - cargo:\n          # Advanced\n          - cargo:\n              command: build\n              title: Fix for issue {{ branch_name }}.",
            "title": "cargo Example"
        },
        {
            "location": "/RUST/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  branches:\n    feature:\n      steps:\n        - rust:\n          - cargo:\n              command: build",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/RUST/#additional-resources",
            "text": "Rust  Cargo  Docker Images",
            "title": "Additional Resources"
        },
        {
            "location": "/SLACK/",
            "text": "Slack\n\n\nOverview\n\n\n\n\nSend messages to a Slack channel during a job run.\n\n\n\n\nTools Section\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel\n\n\nRequired\n\n\nString\n\n\n\n\nThe channel this message should go to, if a private channel the token provided should be allowed to post there.\n\n\n\n\n\n\nmessage\n\n\nRequired\n\n\nString\n\n\n\n\nThe message content that will get sent.\n\n\n\n\n\n\ncredentials\n\n\nRequired\n\n\nMap\n\n\n\n\nA Slack token to use while sending, should be a secret text credential type.\n\n\n\n\n\n\nteamDomain\n\n\nOptional\n\n\nString\n\n\nenv.DEFAULT_SLACK_DOMAIN\n\n\nThe Slack team name\n\n\n\n\n\n\ncolor\n\n\nOptional\n\n\nString\n\n\ngood\n\n\nColor to show on the left of the message, can use a hex code or one of (good, danger, warning).\n\n\n\n\n\n\nbotUser\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nNotification will be sent via a bot user instead of the default user specified in the token.\n\n\n\n\n\n\nfailOnError\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nIf true the entire build will fail if the Slack send is unsuccessful.\n\n\n\n\n\n\n\n\nAvailable Methods\n\n\nsend\n\n\n\n\nSend messages to a Slack channel during a job run.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel\n\n\nRequired\n\n\nString\n\n\n\n\nThe channel this message should go to, if a private channel the token provided should be allowed to post there.\n\n\n\n\n\n\nmessage\n\n\nRequired\n\n\nString\n\n\n\n\nThe message content that will get sent.\n\n\n\n\n\n\ncredentials\n\n\nRequired\n\n\nMap\n\n\n\n\nA Slack token to use while sending, should be a secret text credential type.\n\n\n\n\n\n\nteamDomain\n\n\nOptional\n\n\nString\n\n\nenv.DEFAULT_SLACK_DOMAIN\n\n\nThe Slack team name\n\n\n\n\n\n\ncolor\n\n\nOptional\n\n\nString\n\n\ngood\n\n\nColor to show on the left of the message, can use a hex code or one of (good, danger, warning).\n\n\n\n\n\n\nbotUser\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nNotification will be sent via a bot user instead of the default user specified in the token.\n\n\n\n\n\n\nfailOnError\n\n\nOptional\n\n\nBoolean\n\n\nFalse\n\n\nIf true the entire build will fail if the Slack send is unsuccessful.\n\n\n\n\n\n\n\n\nsend Example\n\n\nbranches:\n  feature:\n    steps:\n      - slack:\n          # Simple\n          - send:\n          # Advanced\n          - send:\n              message: \"Test message during job #<{{ build_url }}|{{ build_number }}}>.\"\n\n\n\n\nFull Example Pipeline\n\n\npipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    slack:\n      credentials:\n        description: Slack token\n      channel: git-notifications\n      teamDomain: concur-test\n  branches:\n    feature:\n      steps:\n        - slack:\n          - send:\n              message: \"Job started on {{ build_url }}\"\n        - golang:\n          - build:\n        - docker:\n          - build:\n          - push:\n\n\n\n\nAdditional Resources\n\n\n\n\nSlack API\n\n\nJenkins Slack plugin GitHub",
            "title": "Slack"
        },
        {
            "location": "/SLACK/#slack",
            "text": "",
            "title": "Slack"
        },
        {
            "location": "/SLACK/#overview",
            "text": "Send messages to a Slack channel during a job run.",
            "title": "Overview"
        },
        {
            "location": "/SLACK/#tools-section",
            "text": "Name  Required  Type  Default  Description      channel  Required  String   The channel this message should go to, if a private channel the token provided should be allowed to post there.    message  Required  String   The message content that will get sent.    credentials  Required  Map   A Slack token to use while sending, should be a secret text credential type.    teamDomain  Optional  String  env.DEFAULT_SLACK_DOMAIN  The Slack team name    color  Optional  String  good  Color to show on the left of the message, can use a hex code or one of (good, danger, warning).    botUser  Optional  Boolean  False  Notification will be sent via a bot user instead of the default user specified in the token.    failOnError  Optional  Boolean  False  If true the entire build will fail if the Slack send is unsuccessful.",
            "title": "Tools Section"
        },
        {
            "location": "/SLACK/#available-methods",
            "text": "",
            "title": "Available Methods"
        },
        {
            "location": "/SLACK/#send",
            "text": "Send messages to a Slack channel during a job run.      Name  Required  Type  Default  Description      channel  Required  String   The channel this message should go to, if a private channel the token provided should be allowed to post there.    message  Required  String   The message content that will get sent.    credentials  Required  Map   A Slack token to use while sending, should be a secret text credential type.    teamDomain  Optional  String  env.DEFAULT_SLACK_DOMAIN  The Slack team name    color  Optional  String  good  Color to show on the left of the message, can use a hex code or one of (good, danger, warning).    botUser  Optional  Boolean  False  Notification will be sent via a bot user instead of the default user specified in the token.    failOnError  Optional  Boolean  False  If true the entire build will fail if the Slack send is unsuccessful.",
            "title": "send"
        },
        {
            "location": "/SLACK/#send-example",
            "text": "branches:\n  feature:\n    steps:\n      - slack:\n          # Simple\n          - send:\n          # Advanced\n          - send:\n              message: \"Test message during job #<{{ build_url }}|{{ build_number }}}>.\"",
            "title": "send Example"
        },
        {
            "location": "/SLACK/#full-example-pipeline",
            "text": "pipelines:\n  tools:\n    branches:\n      patterns:\n        feature: .+\n  tools:\n    slack:\n      credentials:\n        description: Slack token\n      channel: git-notifications\n      teamDomain: concur-test\n  branches:\n    feature:\n      steps:\n        - slack:\n          - send:\n              message: \"Job started on {{ build_url }}\"\n        - golang:\n          - build:\n        - docker:\n          - build:\n          - push:",
            "title": "Full Example Pipeline"
        },
        {
            "location": "/SLACK/#additional-resources",
            "text": "Slack API  Jenkins Slack plugin GitHub",
            "title": "Additional Resources"
        },
        {
            "location": "/CHANGELOG/",
            "text": "Jenkins Workflows\n\n\nv0.5.1\n\n\nChanged\n\n\n\n\nUpdated workflows to use the new Versioning class from workflow libraries.\n\n\n\n\nv0.5.0\n\n\nChanged\n\n\n\n\nDocs: Migrated to Mkdocs static generator.\n\n\nUpdated script to generate docs to be more robust.\n\n\n\n\nv0.4.1\n\n\nChanged\n\n\n\n\ndocker: Stage names changed to be more simple.\n\n\n\n\nv0.4.0\n\n\nAdded\n\n\n\n\nStart of a test framework for workflows.\n\n\n\n\nFixes\n\n\n\n\ngolang.lint: --checkstyle being specified would cause failures\n\n\ngolang.lint: Was not properly get values if specified under tools.golang\n\n\n\n\nChanged\n\n\n\n\ndocker.push: Logging in changed to \necho $password | docker login $endpoint -u $user --password-stdin\n\n\ndocker.*: Stage names changed to reflect the image name instead of dockerfile.\n\n\n\n\nv0.3.0\n\n\nAdded\n\n\n\n\ngolang.lint: Lint Golang code during a pipeline execution.\n\n\ngolang.dep: Support for the official dependency manager for Golang.\n\n\n\n\nFixes\n\n\n\n\ndocker.push: Wrong credential was being pulled.\n\n\ngolang.getStageName: Test workflow failed due to type safety.\n\n\nnodejs & slack: ConcurCommands class name doesn't exist.\n\n\n\n\nv0.2.0\n\n\nAdded\n\n\n\n\nGradle workflow\n\n\nSlack workflow\n\n\nNodeJS workflow\n\n\n\n\nUpdates\n\n\n\n\ngit.commit: Checks for changes before attempting the commit, this didn't cause a failure before but is cleaner now.\n\n\nAdd more asserts to workflows.\n\n\n\n\nv0.1.1\n\n\nFixed\n\n\n\n\ngithub.createRelease: Fix issue where generated name/tag can get multiple \nv\ns for a prefix.\n\n\n\n\n0.1.0\n\n\nAdded\n\n\nPlease view the associated documentation on how to use these workflows, or visit \nGitHub pages\n generated documentation.\n\n\n\n\nAnsible\n\n\nBuild\n\n\nDocker\n\n\nEmail\n\n\nFpm\n\n\nGit\n\n\nGithub\n\n\nGolang\n\n\nPython\n\n\nRust",
            "title": "Changelog"
        },
        {
            "location": "/CHANGELOG/#jenkins-workflows",
            "text": "",
            "title": "Jenkins Workflows"
        },
        {
            "location": "/CHANGELOG/#v051",
            "text": "",
            "title": "v0.5.1"
        },
        {
            "location": "/CHANGELOG/#changed",
            "text": "Updated workflows to use the new Versioning class from workflow libraries.",
            "title": "Changed"
        },
        {
            "location": "/CHANGELOG/#v050",
            "text": "",
            "title": "v0.5.0"
        },
        {
            "location": "/CHANGELOG/#changed_1",
            "text": "Docs: Migrated to Mkdocs static generator.  Updated script to generate docs to be more robust.",
            "title": "Changed"
        },
        {
            "location": "/CHANGELOG/#v041",
            "text": "",
            "title": "v0.4.1"
        },
        {
            "location": "/CHANGELOG/#changed_2",
            "text": "docker: Stage names changed to be more simple.",
            "title": "Changed"
        },
        {
            "location": "/CHANGELOG/#v040",
            "text": "",
            "title": "v0.4.0"
        },
        {
            "location": "/CHANGELOG/#added",
            "text": "Start of a test framework for workflows.",
            "title": "Added"
        },
        {
            "location": "/CHANGELOG/#fixes",
            "text": "golang.lint: --checkstyle being specified would cause failures  golang.lint: Was not properly get values if specified under tools.golang",
            "title": "Fixes"
        },
        {
            "location": "/CHANGELOG/#changed_3",
            "text": "docker.push: Logging in changed to  echo $password | docker login $endpoint -u $user --password-stdin  docker.*: Stage names changed to reflect the image name instead of dockerfile.",
            "title": "Changed"
        },
        {
            "location": "/CHANGELOG/#v030",
            "text": "",
            "title": "v0.3.0"
        },
        {
            "location": "/CHANGELOG/#added_1",
            "text": "golang.lint: Lint Golang code during a pipeline execution.  golang.dep: Support for the official dependency manager for Golang.",
            "title": "Added"
        },
        {
            "location": "/CHANGELOG/#fixes_1",
            "text": "docker.push: Wrong credential was being pulled.  golang.getStageName: Test workflow failed due to type safety.  nodejs & slack: ConcurCommands class name doesn't exist.",
            "title": "Fixes"
        },
        {
            "location": "/CHANGELOG/#v020",
            "text": "",
            "title": "v0.2.0"
        },
        {
            "location": "/CHANGELOG/#added_2",
            "text": "Gradle workflow  Slack workflow  NodeJS workflow",
            "title": "Added"
        },
        {
            "location": "/CHANGELOG/#updates",
            "text": "git.commit: Checks for changes before attempting the commit, this didn't cause a failure before but is cleaner now.  Add more asserts to workflows.",
            "title": "Updates"
        },
        {
            "location": "/CHANGELOG/#v011",
            "text": "",
            "title": "v0.1.1"
        },
        {
            "location": "/CHANGELOG/#fixed",
            "text": "github.createRelease: Fix issue where generated name/tag can get multiple  v s for a prefix.",
            "title": "Fixed"
        },
        {
            "location": "/CHANGELOG/#010",
            "text": "",
            "title": "0.1.0"
        },
        {
            "location": "/CHANGELOG/#added_3",
            "text": "Please view the associated documentation on how to use these workflows, or visit  GitHub pages  generated documentation.   Ansible  Build  Docker  Email  Fpm  Git  Github  Golang  Python  Rust",
            "title": "Added"
        }
    ]
}